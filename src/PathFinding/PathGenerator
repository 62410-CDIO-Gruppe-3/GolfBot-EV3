import numpy as np
from src.ImageRecognition import get_transformed_points  # Adjust import as needed

def get_closest_path_points(transformed_points, reference_point, num_points=5):
    """
    Given a list of transformed points and a reference point,
    return the path of the five closest points to the reference point.

    Args:
        transformed_points (list or np.ndarray): List of (x, y) tuples or Nx2 array.
        reference_point (tuple): (x, y) coordinates to measure distance from.
        num_points (int): Number of closest points to return.

    Returns:
        list: List of the five closest (x, y) points.
    """
    # Convert to numpy array for easier computation
    points = np.array(transformed_points)
    ref = np.array(reference_point)

    # Compute Euclidean distances
    distances = np.linalg.norm(points - ref, axis=1)

    # Get indices of the closest points
    closest_indices = np.argsort(distances)[:num_points]

    # Return the closest points as a list of tuples
    return [tuple(points[i]) for i in closest_indices]

# Example usage:
if __name__ == "__main__":
    # Get transformed points from ImageRecognition
    transformed_points = get_transformed_points()  # Make sure this returns the points
    reference_point = (0, 0)  # Replace with your actual reference point
    closest_points = get_closest_path_points(transformed_points, reference_point)
    print(closest_points)